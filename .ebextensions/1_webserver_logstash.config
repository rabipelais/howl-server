commands:
  create_post_dir:
    command: "mkdir /etc/logstash/patterns"
    ignoreErrors: true
files:
  "/etc/logstash/conf.d/nginx.conf":
    content: |
      input {
        file {
          type => "nginx"
          start_position => "beginning"
          path => [ "/var/log/nginx/*.log" ]
        }
      }

      filter {
        if [type] == "nginx" {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "message" => "%{NGINX_ACCESS}" }
            remove_tag => ["_grokparsefailure"]
            add_tag => ["nginx_access"]
          }
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "message" => "%{NGINX_ERROR}" }
            remove_tag => ["_grokparsefailure"]
            add_tag => ["nginx_error"]
          }
          geoip {
            source => "visitor_ip"
          }
        }
      }
      output {
        elasticsearch {
          hosts => 'search-howl-webserver-kj3sjq7uoeropbdhjnhktghlmm.eu-central-1.es.amazonaws.com'
          timeout => 15
        }
      }

  "/etc/logstash/patterns/nginx"
	content: |
	  NGINX_ACCESS %{IPORHOST:visitor_ip} (?:-|(%{WORD}.%{WORD})) %{WORD:nginx_cache_status} \[%{HTTPDATE:timestamp}\] %{HOST:nginx_host} "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:response} %{NUMBER:bytes} %{QS:ignore} %{QS:referrer}
      NGINX_ERROR %{DATE} %{TIME} %{GREEDYDATA:error} limiting requests, excess: %{GREEDYDATA:limit} client: %{IPORHOST:visitor_ip}, server: %{HOST:nginx_host}, request: "%{WORD:method} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}", %{GREEDYDATA:msg}