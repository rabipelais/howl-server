{
    "swagger": "2.0",
    "schemes": [
        "https"
    ],
    "info": {
        "version": "1.0",
        "title": "Howl Server API",
        "description": "This is an API for the **Howl** server."
    },
    "definitions": {
        "UserAccessToken": {
            "example": {
                "kind": "user",
                "expires": "2015-12-31T00:00:00Z",
                "token": "EAACEdEose0cBAIM1ZBWcOfQl3Gw03XZCY1yxzQZAZCA1HUuaqfaIUmhWRWfZCtDafrX0n6VaU8dGUggn7H0dpGe93eFUfVg5Ew4HxDdjb5jbNuFFuqcMbiKpMPdZAeoZATBVF1j8R5xTrWjiFnDJYLcjuhZCTccZCPqMIwUXZBm0lPNwZDZD",
                "id": "10155182179270463"
            },
            "required": [
                "kind",
                "expires",
                "token",
                "id"
            ],
            "type": "object",
            "description": "'`id` is the FB app user ID, `token` the user access token, and `expires` is the token expiration date in `%FT%T%z` format. `kind` should only be `user`'",
            "properties": {
                "kind": {
                    "type": "string"
                },
                "expires": {
                    "type": "string",
                    "format": "date-time"
                },
                "token": {
                    "type": "string",
                    "format": "password"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "User": {
            "example": {
                "email": "make-it-so@yahoo.com",
                "lastName": "Picard",
                "username": "theCaptain",
                "fbID": "10155182179270463",
                "firstName": "Jean-Luc"
            },
            "required": [
                "fbID",
                "username",
                "firstName"
            ],
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "format": "email"
                },
                "lastName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "fbID": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                }
            }
        },
        "Event": {
            "required": [
                "fbID",
                "description",
                "name",
                "startTime",
                "endTime",
                "venueId"
            ],
            "type": "object",
            "properties": {
                "fbID": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "endTime": {
                    "type": "string",
                    "format": "date-time"
                },
                "venueId": {
                    "type": "string"
                }
            }
        },
        "RSVP": {
            "type": "string",
            "enum": [
                "attending",
                "maybe",
                "created",
                "declined",
                "unsure",
                "not_replied"
            ]
        }
    },
    "paths": {
        "/v1/users": {
            "post": {
                "summary": "Create a new user pulling the data from Facebook",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "201": {
                        "schema": {
                            "$ref": "#/definitions/User"
                        },
                        "description": "User created successfully"
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "409": {
                        "description": "User already exists"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserAccessToken"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ]
            }
        },
        "/v1/users/{userID}": {
            "get": {
                "description": "Get the user data from user `userID`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/User"
                        },
                        "description": ""
                    },
                    "403": {
                        "description": "Could not validate `token`"
                    },
                    "404": {
                        "description": "`userID` not found"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            },
            "put": {
                "description": "Update the data of user `userID`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/User"
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `body`"
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "`userID` not found"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        },
                        "in": "body",
                        "name": "body"
                    }
                ]
            },
            "delete": {
                "description": "Delete the user `userID` permanently",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "`userID` not found"
                    }
                },
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/users/{userID}/friends": {
            "get": {
                "description": "Get the list of friends of user `userID`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        },
                        "description": ""
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "`userID` not found"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            },
            "post": {
                "description": "Create a friend request from `userID` to `friendID`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "202": {
                        "description": "Friend request posted successfully"
                    },
                    "400": {
                        "description": "Invalid `friendID` or `friendID` is not a valid user"
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "`userID` not found"
                    },
                    "409": {
                        "description": "Users are already friends or the request is pending"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "type": "string",
                        "name": "token"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "friendID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/v1/users/{userID}/friends/events": {
            "get": {
                "description": "Get the list of events the friends of `userID` are attending",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `token`"
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "`userID` not found"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/users/{userID}/friends/{friendID}": {
            "delete": {
                "description": "Unfriend `friendID` from `userID`, or remove friend request",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Friend request deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "`userID` not found or users were not friends"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "friendID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/users/{userID}/events": {
            "get": {
                "description": "Get a list of the user's marked events. If `nearby` is set, filter the events around `location` within `distance`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `userID` or `token`, or invalid query parameters."
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "`userID` not found"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": false,
                        "description": "Filter for nearby events. If set, then `location` MUST be set",
                        "in": "query",
                        "name": "nearby",
                        "type": "boolean"
                    },
                    {
                        "required": false,
                        "in": "query",
                        "name": "location",
                        "description": "Geolocation in lat/long format. Example: `location=40.4234,-30.443`",
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 2,
                        "maxItems": 2
                    },
                    {
                        "required": false,
                        "in": "query",
                        "name": "distance",
                        "description": "Distance around `location` for query. Only meaningful if `nearby` is set. In metres, default value is 1km.",
                        "type": "number",
                        "default": 1000
                    },
                    {
                        "required": true,
                        "type": "string",
                        "in": "header",
                        "name": "token"
                    }
                ]
            }
        },
        "/v1/events/{eventID}": {
            "get": {
                "description": "Get the details of `eventID` if the `token` gives enough access permissions",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/Event"
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `eventID` or `token`"
                    },
                    "403": {
                        "description": "Could not validate `token` or `token` doesn't give permission to view this event"
                    },
                    "404": {
                        "description": "`eventID` not found"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "eventID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/events/{eventID}/invite": {
            "post": {
                "description": "Invite `friendID` to `eventID` if the `token` gives enough access permissions",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "202": {
                        "description": "Friend invite accepted on system",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid `eventID` or `token`"
                    },
                    "403": {
                        "description": "Could not validate `token` or `token` doesn't give permission to view this event, or `friendID` is not allowed to get invites from `token` user"
                    },
                    "404": {
                        "description": "`eventID` or `friendID` not found"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "eventID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "friendID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            },
            "delete": {
                "description": "Remove invitation to `friendID` to `eventID` if the `token` gives enough access permissions",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Request accepted on system",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid `eventID` or `token`"
                    },
                    "403": {
                        "description": "Could not validate `token` or `token` doesn't give permission to view this event, or `friendID` is not allowed to get invites from `token` user"
                    },
                    "404": {
                        "description": "`eventID` or `friendID` not found, or user did not invite `friendID`"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "eventID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "friendID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "required": true,
                        "in": "header",
                        "name": "token",
                        "type": "string"
                    }
                ]
            }
        },
        "/v1/events/{eventID}/rsvp": {
            "post": {
                "description": "Change the RSVP status the user to `eventID`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "string"
                        },
                        "description": ""
                    },
                    "403": {
                        "description": "Could not validate token, or user not invited to this event"
                    },
                    "404": {
                        "description": "Could not find `eventID`"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "eventID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "body",
                        "name": "body",
                        "schema": {
                            "$ref": "#/definitions/RSVP"
                        }
                    },
                    {
                        "required": true,
                        "type": "string",
                        "in": "header",
                        "name": "token"
                    }
                ]
            }
        },
        "/v1/events/{eventID}/rsvp/{userID}": {
            "get": {
                "description": "Get the RSVP status of `userID` to `eventID`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "$ref": "#/definitions/RSVP"
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `token`"
                    },
                    "403": {
                        "description": "Could not validate token"
                    },
                    "404": {
                        "description": "Could not find `eventID` or `userID`"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "path",
                        "name": "eventID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "in": "path",
                        "name": "userID",
                        "type": "string"
                    },
                    {
                        "required": true,
                        "type": "string",
                        "in": "header",
                        "name": "token"
                    }
                ]
            }
        },
        "/v1/events/nearby": {
            "get": {
                "description": "Get a list of all public events around `location`",
                "consumes": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Event"
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid `location` or `token`"
                    },
                    "403": {
                        "description": "Could not validate token"
                    }
                },
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "required": true,
                        "in": "query",
                        "name": "location",
                        "description": "Geolocation in lat/long format. Example: `location=40.4234,-30.443`",
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 2,
                        "maxItems": 2
                    },
                    {
                        "required": true,
                        "type": "string",
                        "in": "header",
                        "name": "token"
                    },
                    {
                        "required": false,
                        "in": "query",
                        "name": "distance",
                        "description": "Distance around `location` for query. Only meaningful if `nearby` is set. In metres, default value is 1km.",
                        "type": "number",
                        "default": 1000
                    }
                ]
            }
        }
    }
}